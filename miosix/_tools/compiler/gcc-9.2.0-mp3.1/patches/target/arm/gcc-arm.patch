diff -ruN gcc-9.2.0-old/gcc/config/arm/arm.c gcc-9.2.0/gcc/config/arm/arm.c
--- gcc-9.2.0-old/gcc/config/arm/arm.c	2019-04-23 12:03:41.000000000 +0200
+++ gcc-9.2.0/gcc/config/arm/arm.c	2020-07-18 19:02:13.429006184 +0200
@@ -70,10 +70,20 @@
 #include "gimplify.h"
 #include "gimple.h"
 #include "selftest.h"
+#include "print-tree.h"
+#include <assert.h>
 
 /* This file should be included last.  */
 #include "target-def.h"
 
+/*
+ * https://gcc.gnu.org/legacy-ml/gcc/2017-05/msg00073.html
+ * Disable this warning at the compiler level, as Miosix skipped from GCC 4.7.3
+ * to GCC 9.2.0, so there's no affected code around.
+ */
+#undef warn_psabi /* in case it's already a macro */
+#define warn_psabi 0
+
 /* Forward definitions of types.  */
 typedef struct minipool_node    Mnode;
 typedef struct minipool_fixup   Mfix;
@@ -2758,8 +2768,30 @@
 	}
   }
 
-  if (TARGET_AAPCS_BASED)
-    synchronize_libfunc = init_one_libfunc ("__sync_synchronize");
+  //Rationale:
+  //Compiling code that instantiates C++ static objects on architectures that do
+  //not have memory fence/barrier instructions (e.g: ARM7TDMI) causes undefined
+  //reference to `__sync_synchronize'.
+  //expand_mem_thread_fence() in gcc/optabs.c:6489 tries to emit ASM insn
+  //and failing that, emits the __sync_synchronize call if available.
+  //Synchronize_libfunc is used only in optabs.c and defined only for ARM/MIPS
+  //$ grep -R 'synchronize_libfunc' gcc-9.2.0
+  //libfuncs.h:79:#define synchronize_libfunc    (libfunc_table[LTI_synchronize])
+  //config/arm/arm.c:2776:    synchronize_libfunc = init_one_libfunc ("__sync_synchronize");
+  //config/mips/mips.c:13535:      synchronize_libfunc = init_one_libfunc ("__sync_synchronize");
+  //optabs.c:6500:  else if (synchronize_libfunc != NULL_RTX)
+  //optabs.c:6501:    emit_library_call (synchronize_libfunc, LCT_NORMAL, VOIDmode);
+  //$ grep -Rn 'LTI_synchronize' gcc-9.2.0
+  //libfuncs.h:29:  LTI_synchronize,
+  //libfuncs.h:79:#define synchronize_libfunc (libfunc_table[LTI_synchronize])
+  //The ARM implementation is in libgcc and only exists for linux and bsd.
+  //
+  //Solution: remove given ARM7TDMI don't need hardware memory barriers at all.
+  //
+  //When updating patches to new compiler, check that cortex-M targets have
+  //dmb instructions, while ARM7TDMI code has no calls to __sync_synchronize.
+  //if (TARGET_AAPCS_BASED)
+  //  synchronize_libfunc = init_one_libfunc ("__sync_synchronize");
 
   speculation_barrier_libfunc = init_one_libfunc ("__speculation_barrier");
 }
@@ -7501,6 +7533,157 @@
     }
 }
 
+//TODO: #ifdef _MIOSIX does not work in this context
+
+//Taken from varasm.c, it is static unfortunately, hence the copy-paste
+static int
+contains_pointers_p (const_tree type)
+{
+  switch (TREE_CODE (type))
+    {
+    case POINTER_TYPE:
+    case REFERENCE_TYPE:
+      /* I'm not sure whether OFFSET_TYPE needs this treatment,
+	 so I'll play safe and return 1.  */
+    case OFFSET_TYPE:
+      return 1;
+
+    case RECORD_TYPE:
+    case UNION_TYPE:
+    case QUAL_UNION_TYPE:
+      {
+	tree fields;
+	/* For a type that has fields, see if the fields have pointers.  */
+	for (fields = TYPE_FIELDS (type); fields; fields = DECL_CHAIN (fields))
+	  if (TREE_CODE (fields) == FIELD_DECL
+	      && contains_pointers_p (TREE_TYPE (fields)))
+	    return 1;
+	return 0;
+      }
+
+    case ARRAY_TYPE:
+      /* An array type contains pointers if its element type does.  */
+      return contains_pointers_p (TREE_TYPE (type));
+
+    default:
+      return 0;
+    }
+}
+
+/*
+ * Miosix processes do not live in a virtual address space.
+ * Their code and constants (.text and .rodata) live in FLASH at an address
+ * that is not known until runtime, so PC-relative addressing must be used.
+ * Their variables (.data and .bss) live in RAM, and the offset between
+ * .text and RAM is not constant, so the GOT must be used with single-pic-base.
+ * This function takes a memory reference and returns true if PC-relative
+ * addressing must be used, or false if the GOT must be used.
+ */
+static bool miosix_processes_ref_demux(rtx orig)
+{
+    // This logic has been kept from the original code in legitimize_pic_address
+    if(GET_CODE(orig) == LABEL_REF) return true;
+    
+    // From here on we handle the SYMBOL_REF case
+    //TODO: we don't do anything for DECL_WEAK
+
+    // Dump data structures for debugging purpose
+    // print-rtl.c and print-tree.c are very useful for knowing how they work
+    //debug_rtx(orig);
+    //if(SYMBOL_REF_DECL(orig)) debug_tree(SYMBOL_REF_DECL(orig));
+    
+    bool result = false;
+    const_tree decl = SYMBOL_REF_DECL(orig);
+    if(decl)
+    {
+        if(TREE_CODE(decl) == FUNCTION_DECL)
+        {
+            /*
+             * Taking function address, testcase (compile with -O2)
+             * void f();
+             * typedef void (*fp)();
+             * fp get() { return &f; }
+             */
+            result = true;
+            //printf("constant (FUNCTION_DECL)\n\n");
+        } else if(TREE_CODE(decl) == VAR_DECL) {
+            const_tree type = TREE_TYPE(decl);
+            assert(type != NULL && "Miosix: SYMBOL_REF of unknown constness (type==0)");
+            if(contains_pointers_p(type))
+            {
+                /*
+                 * A true constant pointer can't exist in Miosix processes.
+                 * If it's a constant, the pointer would need to be
+                 * initialized at the definition site, and since it may
+                 * point to a variable in RAM, a runtime relocation is
+                 * needed to initialize it, and because of that it can't
+                 * stay in .rodata among the true constants.
+                 * Const pointers without relocations may exist, say for
+                 * instance int *const p=0; and those *could* stay in .rodata
+                 * but that creates another problem: how do we know from
+                 * the declaration only (extern int *const p;) whether the
+                 * pointer is in .rodata or not? We can't and thus we don't
+                 * know whether to use pc-relative or GOT addressing, so
+                 * we treat *all* const pointers as non const.
+                 */
+                //printf("variable (contains pointers)\n\n");
+            } else if(decl_readonly_section(decl,0)) {
+                /*
+                 * Non-extern consts in non optimized code, testcase (compile with -O0)
+                 * const char str[]="Hello world\n";
+                 * const char *get() { return str; }
+                 */
+                result = true;
+                //printf("constant (decl_readonly_section)\n\n");
+                // remaining if are because decl_readonly_section misses some
+                // const cases
+            } else if(TYPE_READONLY(type)) {
+                /*
+                 * Extern const, testcase (compile with -O2)
+                 * extern const int aRodata;
+                 * int get() { return aRodata; }
+                 */
+                result = true;
+                //printf("constant (TYPE_READONLY)\n\n");
+            } else {
+                /*
+                 * Variables, testcase (compile with -O2)
+                 * extern int aData;
+                 * int get() { return aData; }
+                 */
+                //printf("variable (decl!=0)\n\n");
+            }
+        } else assert(0 && "Miosix: SYMBOL_REF of unknown constness (TREE_CODE?)");
+    } else {
+        //we fall here when optimizations are enabled and sometimes decl==NULL
+        
+        //NOTE: SYMBOL_REF_BLOCK() is valid only if SYMBOL_REF_HAS_BLOCK_INFO_P()
+        if(!SYMBOL_REF_HAS_BLOCK_INFO_P(orig) || SYMBOL_REF_BLOCK(orig) == NULL)
+            assert(0 && "Miosix: SYMBOL_REF of unknown constness (decl==0)");
+        
+        //TODO: output.h defines a few default sections as global variables
+        //do we need to handle more than readonly_data_section?
+        if(SYMBOL_REF_BLOCK(orig)->sect == readonly_data_section)
+        {
+            /*
+             * Non-folded constants when optimizing, testcase (compile with -O2)
+             * const int aRodata2=42;
+             * const int *get() { return &aRodata2; }
+             */
+            result = true;
+            //printf("constant (sect==readonly)\n\n");
+        } else {
+            /* Defined (not just declared) vars when optimizing, testcase (compile with -O2)
+             * int aData=1;
+             * int get() { return aData; }
+             */
+            //printf("variable (decl==0)\n\n");
+        }
+    }
+
+    return result;
+}
+
 /* Legitimize PIC load to ORIG into REG.  If REG is NULL, a new pseudo is
    created to hold the result of the load.  If not NULL, PIC_REG indicates
    which register to use as PIC register, otherwise it is decided by register
@@ -7526,6 +7709,8 @@
 	  reg = gen_reg_rtx (Pmode);
 	}
 
+    bool miosix_ref_demux = miosix_processes_ref_demux(orig);
+
       /* VxWorks does not impose a fixed gap between segments; the run-time
 	 gap can be different from the object-file gap.  We therefore can't
 	 use GOTOFF unless we are absolutely sure that the symbol is in the
@@ -7535,13 +7720,7 @@
       /* References to weak symbols cannot be resolved locally: they
 	 may be overridden by a non-weak definition at link time.  */
       rtx_insn *insn;
-      if ((GET_CODE (orig) == LABEL_REF
-	   || (GET_CODE (orig) == SYMBOL_REF
-	       && SYMBOL_REF_LOCAL_P (orig)
-	       && (SYMBOL_REF_DECL (orig)
-		   ? !DECL_WEAK (SYMBOL_REF_DECL (orig)) : 1)))
-	  && NEED_GOT_RELOC
-	  && arm_pic_data_is_text_relative)
+    if (miosix_ref_demux && NEED_GOT_RELOC && arm_pic_data_is_text_relative)
 	insn = arm_pic_static_addr (orig, reg);
       else
 	{
@@ -23064,14 +23243,24 @@
 	  /* References to weak symbols cannot be resolved locally:
 	     they may be overridden by a non-weak definition at link
 	     time.  */
-	  if (!arm_pic_data_is_text_relative
-	      || (GET_CODE (x) == SYMBOL_REF
-		  && (!SYMBOL_REF_LOCAL_P (x)
-		      || (SYMBOL_REF_DECL (x)
-			  ? DECL_WEAK (SYMBOL_REF_DECL (x)) : 0))))
+      
+      /*
+       * NOTE: On Miosix processes GOTOFF can't work, as we don't know at
+       * time the offset between .text and .got/.data/whatever is in RAM
+       * so always use GOT.
+       * Without this patch a process with something as simple as
+       * int *ptr = { 0 };
+       * int *get() { return ptr; }
+       * uses GOTOFF and produces segfaults upon calling get()
+       */
+// 	  if (!arm_pic_data_is_text_relative
+// 	      || (GET_CODE (x) == SYMBOL_REF
+// 		  && (!SYMBOL_REF_LOCAL_P (x)
+// 		      || (SYMBOL_REF_DECL (x)
+// 			  ? DECL_WEAK (SYMBOL_REF_DECL (x)) : 0))))
 	    fputs ("(GOT)", asm_out_file);
-	  else
-	    fputs ("(GOTOFF)", asm_out_file);
+// 	  else
+// 	    fputs ("(GOTOFF)", asm_out_file);
 	}
       fputc ('\n', asm_out_file);
       return true;
diff -ruN gcc-9.2.0-old/gcc/config/arm/arm.h gcc-9.2.0/gcc/config/arm/arm.h
--- gcc-9.2.0-old/gcc/config/arm/arm.h	2019-04-23 12:03:41.000000000 +0200
+++ gcc-9.2.0/gcc/config/arm/arm.h	2020-07-18 19:02:13.469006131 +0200
@@ -878,7 +878,12 @@
 #define EH_RETURN_STACKADJ_RTX	gen_rtx_REG (SImode, ARM_EH_STACKADJ_REGNUM)
 
 #ifndef ARM_TARGET2_DWARF_FORMAT
-#define ARM_TARGET2_DWARF_FORMAT DW_EH_PE_pcrel
+//TODO: #ifdef _MIOSIX does not work in this context
+//Produce exception unwinding tables that work with Miosix processes
+//see processes-patch.md, section "The problem with unwinding exception tables"
+//we want pcrel as usual for the Miosix kernel, and datarel for processes (pic)
+#define ARM_TARGET2_DWARF_FORMAT (flag_pic ? DW_EH_PE_datarel : DW_EH_PE_pcrel)
+//#define ARM_TARGET2_DWARF_FORMAT DW_EH_PE_pcrel
 #endif
 
 /* ttype entries (the only interesting data references used)
diff -ruN gcc-9.2.0-old/gcc/config/arm/miosix-eabi.h gcc-9.2.0/gcc/config/arm/miosix-eabi.h
--- gcc-9.2.0-old/gcc/config/arm/miosix-eabi.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-9.2.0/gcc/config/arm/miosix-eabi.h	2020-07-18 19:02:13.469006131 +0200
@@ -0,0 +1,19 @@
+
+/*
+ * RATIONALE: adding builtin_define to always define _MIOSIX
+ * - when libgcc/libstdc++/newlib are compiled, as there are some #ifdef _MIOSIX
+ * - when Miosix processes are compiled, to allow #ifdef _MIOSIX
+ * Also add versioning to miosix-specific compiler patches.
+ * Note: intentionally breaking compatibility with previous compiler patches
+ * which defined _MIOSIX_GCC_PATCH_VERSION instead of _MIOSIX_GCC_PATCH_MAJOR
+ */
+
+#undef TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()         \
+    do {                                 \
+        TARGET_BPABI_CPP_BUILTINS();     \
+        builtin_define("_MIOSIX");       \
+        builtin_define("_MIOSIX_GCC_PATCH_MAJOR=3"); \
+        builtin_define("_MIOSIX_GCC_PATCH_MINOR=1"); \
+        builtin_assert("system=miosix"); \
+    } while(false)
diff -ruN gcc-9.2.0-old/libgcc/config/arm/pr-support.c gcc-9.2.0/libgcc/config/arm/pr-support.c
--- gcc-9.2.0-old/libgcc/config/arm/pr-support.c	2019-04-23 12:03:41.000000000 +0200
+++ gcc-9.2.0/libgcc/config/arm/pr-support.c	2020-07-18 19:02:13.485006110 +0200
@@ -376,7 +376,14 @@
 _Unwind_Ptr
 _Unwind_GetDataRelBase (_Unwind_Context *context __attribute__ ((unused)))
 {
-  abort ();
+//TODO: #ifdef _MIOSIX does not work in this context
+//Support exception unwinding that work with Miosix processes
+//see processes-patch.md, section "The problem with unwinding exception tables"
+//NOTE: this code gets linked (even though it never gets used) also in the kernel,
+//so the symbol name we coose here must also exist in the kernel linker scripts
+  extern char _data asm("_data"); //defined in the linker script
+  return &_data;
+//   abort ();
 }
 
 _Unwind_Ptr
diff -ruN gcc-9.2.0-old/gcc/config/arm/t-arm-miosix gcc-9.2.0/gcc/config/arm/t-arm-miosix
--- gcc-9.2.0-old/gcc/config/arm/t-arm-miosix	1970-01-01 01:00:00.000000000 +0100
+++ gcc-9.2.0/gcc/config/arm/t-arm-miosix	2020-07-18 19:02:13.469006131 +0200
@@ -0,0 +1,49 @@
+
+## RATIONALE: build multilibs for ARM, Cortex-Mx, and the pie versions
+
+## To update this file, first have a look in t-arm-elf to see if some new
+## variable has been added
+## According to https://gcc.gnu.org/onlinedocs/gccint/Target-Fragment.html
+## MULTILIB_REQUIRED has been introduced replacing the awkwardly long
+## MULTILIB_EXCEPTIONS list.
+
+MULTILIB_OPTIONS     =
+MULTILIB_DIRNAMES    =
+MULTILIB_MATCHES     =
+MULTILIB_EXCEPTIONS  = 
+MULTILIB_REQUIRED    =
+MULTILIB_REUSE       =
+
+MULTILIB_OPTIONS    += mthumb
+MULTILIB_DIRNAMES   += thumb
+
+MULTILIB_OPTIONS    += mcpu=cortex-m0/mcpu=cortex-m3/mcpu=cortex-m4/mcpu=cortex-m7
+MULTILIB_DIRNAMES   += cm0 cm3 cm4 cm7
+
+MULTILIB_OPTIONS    += mfloat-abi=hard
+MULTILIB_DIRNAMES   += hardfp
+
+MULTILIB_OPTIONS    += mfpu=fpv4-sp-d16/mfpu=fpv5-d16
+MULTILIB_DIRNAMES   += fpv4sp fpv5
+
+MULTILIB_OPTIONS    += fpie msingle-pic-base
+MULTILIB_DIRNAMES   += pie single-pic-base
+
+## The following multilibs will be built:
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m0
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m3
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m4/mfloat-abi=hard/mfpu=fpv4-sp-d16
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m7/mfloat-abi=hard/mfpu=fpv5-d16
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m3/fpie/msingle-pic-base
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m4/mfloat-abi=hard/mfpu=fpv4-sp-d16/fpie/msingle-pic-base
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m7/mfloat-abi=hard/mfpu=fpv5-d16/fpie/msingle-pic-base
+
+# The output produced by 'arm-miosix-eabi-gcc --print-multi-lib' is
+# .;
+# thumb/cm0;@mthumb@mcpu=cortex-m0
+# thumb/cm3;@mthumb@mcpu=cortex-m3
+# thumb/cm3/pie/single-pic-base;@mthumb@mcpu=cortex-m3@fpie@msingle-pic-base
+# thumb/cm4/hardfp/fpv4sp;@mthumb@mcpu=cortex-m4@mfloat-abi=hard@mfpu=fpv4-sp-d16
+# thumb/cm4/hardfp/fpv4sp/pie/single-pic-base;@mthumb@mcpu=cortex-m4@mfloat-abi=hard@mfpu=fpv4-sp-d16@fpie@msingle-pic-base
+# thumb/cm7/hardfp/fpv5;@mthumb@mcpu=cortex-m7@mfloat-abi=hard@mfpu=fpv5-d16
+# thumb/cm7/hardfp/fpv5/pie/single-pic-base;@mthumb@mcpu=cortex-m7@mfloat-abi=hard@mfpu=fpv5-d16@fpie@msingle-pic-base
diff -ruN gcc-9.2.0-old/gcc/config.gcc gcc-9.2.0/gcc/config.gcc
--- gcc-9.2.0-old/gcc/config.gcc	2019-08-03 22:16:22.000000000 +0200
+++ gcc-9.2.0/gcc/config.gcc	2020-07-18 19:02:13.469006131 +0200
@@ -1218,6 +1218,13 @@
 	tmake_file="${tmake_file} arm/t-arm arm/t-arm-elf"
 	target_cpu_cname="arm7tdmi"
 	case ${target} in
+	arm*-miosix-eabi*)
+	  # Copy options from arm*-*-eabi*, add the miosix-specific ones
+	  # and make sure arm/t-arm-elf is not added to tmake_file
+	  tm_file="${tm_file} newlib-stdint.h arm/miosix-eabi.h"  # Append
+	  tmake_file="arm/t-arm arm/t-arm-miosix arm/t-bpabi"     # Replace
+	  use_gcc_stdint=wrap
+	  ;;
 	arm*-*-eabi*)
 	  tm_file="$tm_file newlib-stdint.h"
 	  tmake_file="${tmake_file} arm/t-bpabi"
diff -ruN gcc-9.2.0-old/libatomic/configure.tgt gcc-9.2.0/libatomic/configure.tgt
--- gcc-9.2.0-old/libatomic/configure.tgt	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libatomic/configure.tgt	2020-07-18 19:02:13.485006110 +0200
@@ -154,6 +154,10 @@
         esac
 	;;
 
+  arm*-miosix-eabi*)
+	config_path="miosix"
+	;;
+
   *-*-rtems*)
 	XCFLAGS="${configure_tgt_pre_target_cpu_XCFLAGS}"
 	config_path="rtems"
diff -ruN gcc-9.2.0-old/libgcc/config/arm/unwind-arm.h gcc-9.2.0/libgcc/config/arm/unwind-arm.h
--- gcc-9.2.0-old/libgcc/config/arm/unwind-arm.h	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libgcc/config/arm/unwind-arm.h	2020-07-19 15:18:14.643454187 +0200
@@ -57,6 +57,12 @@
 #elif defined(__symbian__) || defined(__uClinux__)
 #define _GLIBCXX_OVERRIDE_TTYPE_ENCODING (DW_EH_PE_absptr)
       /* Absolute pointer.  Nothing more to do.  */
+#elif defined(_MIOSIX)
+     //DO NOT DEFINE _GLIBCXX_OVERRIDE_TTYPE_ENCODING, we don't want that kludge
+     //as the encoding could be either pc-relative (kernel) or data-relative (processes)
+     //see processes-patch.md
+     //This relies on base_of_encoded_value() setting base to 0 for DW_EH_PE_pcrel
+     tmp += base ? base : ptr;
 #else
 #define _GLIBCXX_OVERRIDE_TTYPE_ENCODING (DW_EH_PE_pcrel)
       /* Pc-relative pointer.  */
diff -ruN gcc-9.2.0-old/libgcc/unwind-arm-common.inc gcc-9.2.0/libgcc/unwind-arm-common.inc
--- gcc-9.2.0-old/libgcc/unwind-arm-common.inc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libgcc/unwind-arm-common.inc	2020-07-18 19:02:13.489006105 +0200
@@ -46,14 +46,18 @@
     ctm_succeeded_with_ptr_to_base = 2
   };
 
-void __attribute__((weak)) __cxa_call_unexpected(_Unwind_Control_Block *ucbp);
-bool __attribute__((weak)) __cxa_begin_cleanup(_Unwind_Control_Block *ucbp);
-enum __cxa_type_match_result __attribute__((weak)) __cxa_type_match
+// Also declaring function prototypes weak seems to trigger the generation of
+// R_ARM_REL32. This only happens with a test program that does not throw
+// exceptions such as a main.cpp with just a printf() compiled without
+// -fno-exceptions for now, we'll just remove weak
+void /*__attribute__((weak))*/ __cxa_call_unexpected(_Unwind_Control_Block *ucbp);
+bool /*__attribute__((weak))*/ __cxa_begin_cleanup(_Unwind_Control_Block *ucbp);
+enum __cxa_type_match_result /*__attribute__((weak))*/ __cxa_type_match
   (_Unwind_Control_Block *ucbp, const type_info *rttip,
    bool is_reference, void **matched_object);
 
-_Unwind_Ptr __attribute__((weak))
-__gnu_Unwind_Find_exidx (_Unwind_Ptr, int *);
+//_Unwind_Ptr __attribute__((weak))
+//__gnu_Unwind_Find_exidx (_Unwind_Ptr, int *);
 
 #define EXIDX_CANTUNWIND 1
 #define uint32_highbit (((_uw) 1) << 31)
@@ -205,7 +209,15 @@
      instruction itself.  */
   return_address -= 2;
 
-  if (__gnu_Unwind_Find_exidx)
+  //TODO: #ifdef _MIOSIX does not work in this context
+  /*
+   * Apparently checking the address of a weak symbol does not work in Miosix
+   * processes, as we get
+   * libgcc.a(unwind-arm.o): relocation R_ARM_REL32 against external or undefined symbol `__gnu_Unwind_Find_exidx' can not be used when making a PIE executable; recompile with -fPIC
+   * unwind-arm-common.inc:237:(.text+0x138): dangerous relocation: unsupported relocation
+   * Since in Miosix we have __exidx_start|end, just remove this code
+   */
+  /*if (__gnu_Unwind_Find_exidx)
     {
       eitp = (const __EIT_entry *) __gnu_Unwind_Find_exidx (return_address,
 							    &nrec);
@@ -216,10 +228,10 @@
 	}
     }
   else
-    {
+    {*/
       eitp = &__exidx_start;
       nrec = &__exidx_end - &__exidx_start;
-    }
+    //}
 
   eitp = search_EIT_table (eitp, nrec, return_address);
